17. FRONT-END SETUP

    1. Setup

        NOPE
            npx create-react-app airbnb-react --template=typescript
            npm i @chakra-ui/react @emotion/react @emotion/styled framer-motion

        USE THIS INSTEAD
            npx create-react-app my-app --template @chakra-ui/typescript

        cd airbnb-react && code .
        
        src > DELETE
            only apptsx, indextsx, react-app-env left

        index >
            DEL import reportWebVitals from './reportWebVitals';
                import './index.css';
                reportWebVitals()

        app >
            DEL import logo from './logo.svg';
                import './App.css';
                return only <div/>

        npm i react-router-dom

        index >
            surrond app with ChakraProvider

        >npm run start

        app > 
            <Text fontSize={"2xl"} color={"red.600"}>
            hi
            </Text>

    2. Router Setup

    Root acts as the base URL for website styles
    Outlet allows a specific page to be rendered depending on the route

        src > components.Root.tsx >
            (rfce)
            import { Outlet } from 'react-router-dom';

            function Root() {
            return (
                <div>
                    Root
                    <Outlet />
                </div>
            )
            }

            export default Root

    This is done in router.tsx, where a router variable referencing Root
    as the element, and various routes as the children is created. But first,
    some things need to change.
        
        DELETE APP.tsx
        index >
            replace <App/> with <RouterProvider/>
            replace import { App } from "./App"
                with import { RouterProvider } from "react-router-dom"

    Now create a routes folder and rfce 2 testing routes (Home.tsx & Users.tsx)
    Then create the router.

        src > router.tsx >
            import { createBrowserRouter } from 'react-router-dom';
            import Root from './components/Root';

            const router = createBrowserRouter([{
                path: "/",
                element: <Root />,
                children: [
                    {
                        path: "",
                        element: <Home />
                    },
                    {
                        path: "users",
                        element: <Users />
                    }
                ]
            }]);

            export default router;

    Navigating to each route (http://localhost:3000/ & http://localhost:3000/users)
    the text is different

    3. Not Found page

    DELETE USers.tsx
    create NotFound.tsx in routes
    add to router, before children variable and after path variable as errorElement
        errorElement: <NotFound />,
    navigate to non-existent page - works

    NotFound
        import { Button, Heading, Text, VStack } from '@chakra-ui/react'
        import { Link } from 'react-router-dom';
        function NotFound() {
            return (
                <VStack
                    justifyContent={"center"}
                    minH="100vh"
                    background={"gray.100"}
                >
                    <Heading>Page not found.</Heading>
                    <Text>It seems you are lost</Text>
                    <Link to='/'>
                        <Button
                            variant={"link"}
                            // ghost, solid, link, outline
                            colorScheme={"twitter"}
                        // twitter, red
                        >Go home &rarr;</Button>
                    </Link>
                </VStack>
            );
        }

        export default NotFound

    4. Chakra Tour

        chakra-ui.com/docs/components

-------------------------------------------------------------------------

18. CHAKRA UI

    1. Header

    npm i react-icons
    default theme chakra page
    rem is based on the body font-size 
        if fs is 16px 1rem is 16px

    icons are not chakra components, so need to be enclosed with a chakra box
    to change color

    Root.tsx>
        import { Box, Button, HStack } from '@chakra-ui/react';
        import { FaAirbnb } from 'react-icons/fa';
        import { Outlet } from 'react-router-dom';

        function Root() {
        return (
            <Box>
            <HStack py={"5"} px={10} borderBottomWidth={1}
                justifyContent="space-between">
                <Box color={"red.500"}>
                <FaAirbnb size={48} />
                </Box>
                <HStack spacing={"2rem"}>
                <Button>Login</Button>
                <Button colorScheme={"red"}>Signup</Button>
                </HStack>
            </HStack>
            <Outlet />
            </Box>
        )
        }

        export default Root

    2. Login Modal

        <Modal isOpen={isOpen} onClose={onClose}>
            <ModalOverlay />
            <ModalContent>
                <ModalHeader>Login</ModalHeader>
                <ModalCloseButton />
                <ModalBody>
                <VStack>
                    <InputGroup>
                    <InputLeftElement children={
                        <Box color={"gray.500"}>
                        <FaUserNinja />
                        </Box>} />
                    <Input
                        placeholder='Username'
                        variant={"filled"} />
                    </InputGroup>
                    <InputGroup>
                    <InputLeftElement children={
                        <Box color={"gray.500"}>
                        <FaLock />
                        </Box>} />
                    <Input
                        placeholder='Password'
                        variant={"filled"} />
                    </InputGroup>
                </VStack>

                </ModalBody>
                <ModalFooter>
                <Button colorScheme={"red"} w={"100%"}>Login</Button>
                </ModalFooter>
            </ModalContent>

            </Modal>

    3. Signup Modal

        Separate Compontents>
            Header.tsx
                SocialLogin.tsx
                    LoginModal.tsx
                    SignupModal.tsx

        use useDisclosure to control each Modal
            renaming isOpen, onOpen, onClose using :
                eg. isOpen:isLoginOpen

    4. Dark Mode

        src>theme.ts
            import { extendTheme, type ThemeConfig } from "@chakra-ui/react";

            const config: ThemeConfig = {
                initialColorMode: "light",
                useSystemColorMode: false,
            }

            const theme = extendTheme({ config })
            export default theme;

        index.tsx > pass theme to ChakraProvider
            import { ChakraProvider, ColorModeScript } from "@chakra-ui/react"
            import theme from "./theme"

            <ChakraProvider theme={theme}>
                <ColorModeScript initialColorMode={theme.config.initialColorMode} />

            ...
        
            ctrl + shift + j > application > local storage > delete key & restart server
            updates based on theme.js theme (light, dark)

        Header >
            const { colorMode, toggleColorMode } = useColorMode();

            <IconButton
                onClick={toggleColorMode}
                variant={"ghost"}
                aria-label='Toggle Dark Mode'
                icon={colorMode === "light" ? <FaMoon /> : <FaSun />} />

        ^ long way
        > short way > [useColorModeValue(varforlight, varfordark)]
            const colorToggleICon = useColorModeValue(<FaMoon />, <FaSun />)
                
                ...
                icon={colorToggleICon} />


        Wrap components in LightMode or DarkMode to force stylings for that Mode 
            regardless of current Mode
                <LightMode>
                    <Button colorScheme={"red"}
                        onClick={onSignupOpen}
                    >Signup</Button>
                </LightMode>

        Animation >
            Wrap component to animate (iconbutton) with AnimatorPresence & motion.div
            with exitBeforeEnter & initial={false}

            import { AnimatePresence, motion } from 'framer-motion';

                <AnimatePresence exitBeforeEnter initial={false}>
                    <motion.div
                        style={{ display: 'inline-block' }}
                        key={useColorModeValue('light', 'dark')}
                        initial={{ y: -20, opacity: 0 }}
                        animate={{ y: 0, opacity: 1 }}
                        exit={{ y: 20, opacity: 0 }}
                        transition={{ duration: 0.1 }}
                    >
                        COMPONENT
                    </motion.div>
                </AnimatePresence> 

    5. Rooms Grid

        Home >
            Create Grid component with boxes inside 
<Grid
            columnGap={4}
            rowGap={8}
            templateColumns={{
                sm: "1fr",
                md: "1fr 1fr",
                lg: "repeat(3, 1fr)",
                xl: "repeat(4, 1fr)",
                "2xl": "repeat(4, 1fr)",
            }}
            px={{
                sm: 10,
                lg: 40,
            }}
            mt={10}
        ><Boxes......></Grid>

    6. Responsive Design

            templateColumns={{
                sm: "1fr",
                md: "1fr 1fr",
                lg: "repeat(2, 1fr)",
                xl: "repeat(3, 1fr)",
                "2xl": "repeat(4, 1fr)",
            }}

            fix heading from hstack to stack to control direction depending on screen size>
                <Stack py={5}
                px={{
                    base: 10,
                    lg: 40,
                }}
                alignItems="center"
                spacing={{
                    sm: 4,
                    md: 0,
                }}
                borderBottomWidth={1}
                justifyContent={"space-between"}
                direction={{
                    sm: "column",
                    md: "row",
                }}>


      Add custom breakpoints to theme.ts
      const breakpoints = {
            sm: '320px',
            md: '768px',
            lg: '960px',
            xl: '1200px',
            '2xl': '1536',
            '3xl': '1800',
            '4xl': '2266',
            '5xl': '2655',
        }          
    const theme = extendTheme({ config, breakpoints })


    7. Skeletons

        import { Box, HStack, Skeleton, SkeletonCircle, SkeletonText, Spacer } from "@chakra-ui/react"

        function SkeletonRoom() {
            return (
                <Box>
                    <Skeleton height={{ sm: 315, lg: 290 }} rounded="3xl" mb={3} />
                    <HStack mb={-0.5} w={"100%"}>
                        <SkeletonText noOfLines={1} w={"70%"} />
                        <Spacer />
                        <SkeletonCircle py={1} px={7} />
                    </HStack>
                    <SkeletonText noOfLines={1} w={"50%"} mb={3} />
                    <SkeletonText noOfLines={1} w={"25%"} mt={4} />
                </Box>
            )
        }

        export default SkeletonRoom


    _hover={{color:"red}}

-------------------------------------------------------------------------

19. REACT QUERY / TANSTACK QUERY


    1. Manual Fetching
    
    2. Recap

    3. React Query / Tanstack

    4. Axios

    5. Room Detail

    6. Devtools and Query Keys

    7. Photos Grid

    8. Reviews

    9. Conclusion

-------------------------------------------------------------------------

20. AUTHENTICATION (FRONTEND)

    1. useUser


    2. Credentials



        2b RECAP

    3. Log Out


    4. CSRF


    5. Github Login


    6. Github Code


    7. Access Token


    8. Emails


    9. Kakao Talk App


    10. Kakao Talk Auth


    11. Kakao Login


    12. Login Form


    13. React Hook Form


    14. useMutation


    15. Recap & Code Challenge 

-------------------------------------------------------------------------

21. UPLOAD ROOM

    1. Protected Pages


    2. Upload Form


    3. Dynamic Form


    4. register


    5. Bugfix


    6. Upload Form


    7. One-Time Upload


    8. File Upload


    9. Final Mutation


    10. Recap

-------------------------------------------------------------------------

22. CALENDAR


    1. Calendar Component


    2. Booking Dates


    3. Checking Dates


    4. Timezones


    5. Code Challenge

-------------------------------------------------------------------------

23. DEPLOYMENT

    1. Render Blueprint


    2. Sentry


    3. Custom Domain


    4. Rewrites


    5. Conclusions

-------------------------------------------------------------------------
